// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as environments from "../../../../environments.js";
import * as errors from "../../../../errors/index.js";
import * as Lattice from "../../../index.js";

export declare namespace Entities {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

/**
 * The Entities API
 */
export class Entities {
    protected readonly _options: Entities.Options;

    constructor(_options: Entities.Options = {}) {
        this._options = _options;
    }

    /**
     * Publish an entity for ingest into the Entities API. Entities created with this method are "owned" by the originator: other sources,
     * such as the UI, may not edit or delete these entities. The server validates entities at API call time and
     * returns an error if the entity is invalid.
     *
     * An entity ID must be provided when calling this endpoint. If the entity referenced by the entity ID does not exist
     * then it will be created. Otherwise the entity will be updated. An entity will only be updated if its
     * provenance.sourceUpdateTime is greater than the provenance.sourceUpdateTime of the existing entity.
     *
     * @param {Lattice.Entity} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lattice.BadRequestError}
     * @throws {@link Lattice.UnauthorizedError}
     *
     * @example
     *     await client.entities.publishEntity({})
     */
    public publishEntity(
        request: Lattice.Entity,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Lattice.Entity> {
        return core.HttpResponsePromise.fromPromise(this.__publishEntity(request, requestOptions));
    }

    private async __publishEntity(
        request: Lattice.Entity,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Lattice.Entity>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LatticeEnvironment.Default,
                "api/v1/entities",
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lattice.Entity, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.LatticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LatticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LatticeTimeoutError("Timeout exceeded when calling PUT /api/v1/entities.");
            case "unknown":
                throw new errors.LatticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} entityId - ID of the entity to return
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lattice.BadRequestError}
     * @throws {@link Lattice.UnauthorizedError}
     * @throws {@link Lattice.NotFoundError}
     *
     * @example
     *     await client.entities.getEntity("entityId")
     */
    public getEntity(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Lattice.Entity> {
        return core.HttpResponsePromise.fromPromise(this.__getEntity(entityId, requestOptions));
    }

    private async __getEntity(
        entityId: string,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Lattice.Entity>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LatticeEnvironment.Default,
                `api/v1/entities/${core.url.encodePathParam(entityId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lattice.Entity, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Lattice.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.LatticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LatticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LatticeTimeoutError("Timeout exceeded when calling GET /api/v1/entities/{entityId}.");
            case "unknown":
                throw new errors.LatticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Only fields marked with overridable can be overridden. Please refer to our documentation to see the comprehensive
     * list of fields that can be overridden. The entity in the request body should only have a value set on the field
     * specified in the field path parameter. Field paths are rooted in the base entity object and must be represented
     * using lower_snake_case. Do not include "entity" in the field path.
     *
     * Note that overrides are applied in an eventually consistent manner. If multiple overrides are created
     * concurrently for the same field path, the last writer wins.
     *
     * @param {string} entityId - The unique ID of the entity to override
     * @param {string} fieldPath - fieldPath to override
     * @param {Lattice.EntityOverride} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lattice.BadRequestError}
     * @throws {@link Lattice.UnauthorizedError}
     * @throws {@link Lattice.NotFoundError}
     *
     * @example
     *     await client.entities.overrideEntity("entityId", "mil_view.disposition")
     */
    public overrideEntity(
        entityId: string,
        fieldPath: string,
        request: Lattice.EntityOverride = {},
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Lattice.Entity> {
        return core.HttpResponsePromise.fromPromise(
            this.__overrideEntity(entityId, fieldPath, request, requestOptions),
        );
    }

    private async __overrideEntity(
        entityId: string,
        fieldPath: string,
        request: Lattice.EntityOverride = {},
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Lattice.Entity>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LatticeEnvironment.Default,
                `api/v1/entities/${core.url.encodePathParam(entityId)}/override/${core.url.encodePathParam(fieldPath)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lattice.Entity, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Lattice.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.LatticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LatticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LatticeTimeoutError(
                    "Timeout exceeded when calling PUT /api/v1/entities/{entityId}/override/{fieldPath}.",
                );
            case "unknown":
                throw new errors.LatticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This operation clears the override value from the specified field path on the entity.
     *
     * @param {string} entityId - The unique ID of the entity to undo an override from.
     * @param {string} fieldPath - The fieldPath to clear overrides from.
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lattice.BadRequestError}
     * @throws {@link Lattice.UnauthorizedError}
     * @throws {@link Lattice.NotFoundError}
     *
     * @example
     *     await client.entities.removeEntityOverride("entityId", "mil_view.disposition")
     */
    public removeEntityOverride(
        entityId: string,
        fieldPath: string,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Lattice.Entity> {
        return core.HttpResponsePromise.fromPromise(this.__removeEntityOverride(entityId, fieldPath, requestOptions));
    }

    private async __removeEntityOverride(
        entityId: string,
        fieldPath: string,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Lattice.Entity>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LatticeEnvironment.Default,
                `api/v1/entities/${core.url.encodePathParam(entityId)}/override/${core.url.encodePathParam(fieldPath)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lattice.Entity, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Lattice.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.LatticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LatticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LatticeTimeoutError(
                    "Timeout exceeded when calling DELETE /api/v1/entities/{entityId}/override/{fieldPath}.",
                );
            case "unknown":
                throw new errors.LatticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This is a long polling API that will first return all pre-existing data and then return all new data as
     * it becomes available. If you want to start a new polling session then open a request with an empty
     * 'sessionToken' in the request body. The server will return a new session token in the response.
     * If you want to retrieve the next batch of results from an existing polling session then send the session
     * token you received from the server in the request body. If no new data is available then the server will
     * hold the connection open for up to 5 minutes. After the 5 minute timeout period, the server will close the
     * connection with no results and you may resume polling with the same session token. If your session falls behind
     * more than 3x the total number of entities in the environment, the server will terminate your session.
     * In this case you must start a new session by sending a request with an empty session token.
     *
     * @param {Lattice.EntityEventRequest} request
     * @param {Entities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Lattice.BadRequestError}
     * @throws {@link Lattice.UnauthorizedError}
     * @throws {@link Lattice.NotFoundError}
     * @throws {@link Lattice.RequestTimeoutError}
     * @throws {@link Lattice.TooManyRequestsError}
     *
     * @example
     *     await client.entities.longPollEntityEvents({
     *         sessionToken: "sessionToken"
     *     })
     */
    public longPollEntityEvents(
        request: Lattice.EntityEventRequest,
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<Lattice.EntityEventResponse> {
        return core.HttpResponsePromise.fromPromise(this.__longPollEntityEvents(request, requestOptions));
    }

    private async __longPollEntityEvents(
        request: Lattice.EntityEventRequest,
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<Lattice.EntityEventResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LatticeEnvironment.Default,
                "api/v1/entities/events",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Lattice.EntityEventResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Lattice.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 408:
                    throw new Lattice.RequestTimeoutError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Lattice.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.LatticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LatticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LatticeTimeoutError("Timeout exceeded when calling POST /api/v1/entities/events.");
            case "unknown":
                throw new errors.LatticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Establishes a persistent connection to stream entity events as they occur.
     */
    public streamEntities(
        request: Lattice.EntityStreamRequest = {},
        requestOptions?: Entities.RequestOptions,
    ): core.HttpResponsePromise<core.Stream<Lattice.StreamEntitiesResponse>> {
        return core.HttpResponsePromise.fromPromise(this.__streamEntities(request, requestOptions));
    }

    private async __streamEntities(
        request: Lattice.EntityStreamRequest = {},
        requestOptions?: Entities.RequestOptions,
    ): Promise<core.WithRawResponse<core.Stream<Lattice.StreamEntitiesResponse>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher<ReadableStream>({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LatticeEnvironment.Default,
                "api/v1/entities/stream",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            responseType: "sse",
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: new core.Stream({
                    stream: _response.body,
                    parse: (data) => data as any,
                    signal: requestOptions?.abortSignal,
                    eventShape: {
                        type: "sse",
                        streamTerminator: "[DONE]",
                    },
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Lattice.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Lattice.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.LatticeError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LatticeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LatticeTimeoutError("Timeout exceeded when calling POST /api/v1/entities/stream.");
            case "unknown":
                throw new errors.LatticeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
