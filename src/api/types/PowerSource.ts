// This file was auto-generated by Fern from our API Definition.

import type * as Lattice from "../index.js";

/**
 * Represents the state of a single power source that is connected to this entity.
 */
export interface PowerSource {
    /** Status of the power source. */
    powerStatus?: PowerSource.PowerStatus;
    /** Used to determine the type of power source. */
    powerType?: PowerSource.PowerType;
    /** Power level of the system. If absent, the power level is assumed to be unknown. */
    powerLevel?: Lattice.PowerLevel;
    /**
     * Set of human-readable messages with status of the power system. Typically this would be used in an error state
     *  to provide additional error information. This can also be used for informational messages.
     */
    messages?: string[];
    /**
     * Whether the power source is offloadable. If the value is missing (as opposed to false) then the entity does not
     *  report whether the power source is offloadable.
     */
    offloadable?: boolean;
}

export namespace PowerSource {
    /** Status of the power source. */
    export const PowerStatus = {
        PowerStatusInvalid: "POWER_STATUS_INVALID",
        PowerStatusUnknown: "POWER_STATUS_UNKNOWN",
        PowerStatusNotPresent: "POWER_STATUS_NOT_PRESENT",
        PowerStatusOperating: "POWER_STATUS_OPERATING",
        PowerStatusDisabled: "POWER_STATUS_DISABLED",
        PowerStatusError: "POWER_STATUS_ERROR",
    } as const;
    export type PowerStatus = (typeof PowerStatus)[keyof typeof PowerStatus];
    /** Used to determine the type of power source. */
    export const PowerType = {
        PowerTypeInvalid: "POWER_TYPE_INVALID",
        PowerTypeUnknown: "POWER_TYPE_UNKNOWN",
        PowerTypeGas: "POWER_TYPE_GAS",
        PowerTypeBattery: "POWER_TYPE_BATTERY",
    } as const;
    export type PowerType = (typeof PowerType)[keyof typeof PowerType];
}
