// This file was auto-generated by Fern from our API Definition.

import type * as Lattice from "../index.js";

/**
 * General health of the entity as reported by the entity.
 */
export interface Health {
    /** Status indicating whether the entity is able to communicate with Entity Manager. */
    connectionStatus?: Health.ConnectionStatus;
    /** Top-level health status; typically a roll-up of individual component healths. */
    healthStatus?: Health.HealthStatus;
    /** Health of individual components running on this Entity. */
    components?: Lattice.ComponentHealth[];
    /**
     * The update time for the top-level health information.
     *  If this timestamp is unset, the data is assumed to be most recent
     */
    updateTime?: string;
    /**
     * Active alerts indicate a critical change in system state sent by the asset
     *  that must be made known to an operator or consumer of the common operating picture.
     *  Alerts are different from ComponentHealth messages--an active alert does not necessarily
     *  indicate a component is in an unhealthy state. For example, an asset may trigger
     *  an active alert based on fuel levels running low. Alerts should be removed from this list when their conditions
     *  are cleared. In other words, only active alerts should be reported here.
     */
    activeAlerts?: Lattice.Alert[];
}

export namespace Health {
    /** Status indicating whether the entity is able to communicate with Entity Manager. */
    export const ConnectionStatus = {
        ConnectionStatusInvalid: "CONNECTION_STATUS_INVALID",
        ConnectionStatusOnline: "CONNECTION_STATUS_ONLINE",
        ConnectionStatusOffline: "CONNECTION_STATUS_OFFLINE",
    } as const;
    export type ConnectionStatus = (typeof ConnectionStatus)[keyof typeof ConnectionStatus];
    /** Top-level health status; typically a roll-up of individual component healths. */
    export const HealthStatus = {
        HealthStatusInvalid: "HEALTH_STATUS_INVALID",
        HealthStatusHealthy: "HEALTH_STATUS_HEALTHY",
        HealthStatusWarn: "HEALTH_STATUS_WARN",
        HealthStatusFail: "HEALTH_STATUS_FAIL",
        HealthStatusOffline: "HEALTH_STATUS_OFFLINE",
        HealthStatusNotReady: "HEALTH_STATUS_NOT_READY",
    } as const;
    export type HealthStatus = (typeof HealthStatus)[keyof typeof HealthStatus];
}
