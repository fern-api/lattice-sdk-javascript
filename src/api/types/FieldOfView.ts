// This file was auto-generated by Fern from our API Definition.

import type * as Lattice from "../index.js";

/**
 * Sensor Field Of View closely resembling fov.proto SensorFieldOfView.
 */
export interface FieldOfView {
    /**
     * The Id for one instance of a FieldOfView, persisted across multiple updates to provide continuity during
     *  smoothing. This is relevant for sensors where the dwell schedule is on the order of
     *  milliseconds, making multiple FOVs a requirement for proper display of search beams.
     */
    fovId?: number;
    /** The Id of the mount the sensor is on. */
    mountId?: string;
    /** The field of view the sensor projected onto the ground. */
    projectedFrustum?: Lattice.ProjectedFrustum;
    /** Center ray of the frustum projected onto the ground. */
    projectedCenterRay?: Lattice.Position;
    /**
     * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
     *  the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
     *  frame when transformed by the quaternion contained in this pose.
     */
    centerRayPose?: Lattice.Pose;
    /** Horizontal field of view in radians. */
    horizontalFov?: number;
    /** Vertical field of view in radians. */
    verticalFov?: number;
    /** Sensor range in meters. */
    range?: number;
    /**
     * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
     *  sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
     *  tighter bounded tracking.
     */
    mode?: FieldOfView.Mode;
}

export namespace FieldOfView {
    /**
     * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
     *  sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
     *  tighter bounded tracking.
     */
    export const Mode = {
        SensorModeInvalid: "SENSOR_MODE_INVALID",
        SensorModeSearch: "SENSOR_MODE_SEARCH",
        SensorModeTrack: "SENSOR_MODE_TRACK",
        SensorModeWeaponSupport: "SENSOR_MODE_WEAPON_SUPPORT",
        SensorModeAuto: "SENSOR_MODE_AUTO",
        SensorModeMute: "SENSOR_MODE_MUTE",
    } as const;
    export type Mode = (typeof Mode)[keyof typeof Mode];
}
