// This file was auto-generated by Fern from our API Definition.

import type * as Lattice from "../index.js";

/**
 * Details about an override. Last write wins.
 */
export interface Override {
    /** override request id for an override request */
    requestId?: string;
    /**
     * proto field path which is the string representation of a field.
     *  example: correlated.primary_entity_id would be primary_entity_id in correlated component
     */
    fieldPath?: string;
    /**
     * new field value corresponding to field path. In the shape of an empty entity with only the changed value.
     *  example: entity: { mil_view: { disposition: Disposition_DISPOSITION_HOSTILE } }
     */
    maskedFieldValue?: Lattice.Entity;
    /** status of the override */
    status?: Override.Status;
    provenance?: Lattice.Provenance;
    /**
     * The type of the override, defined by the stage of the entity lifecycle that the entity was in when the override
     *  was requested.
     */
    type?: Override.Type;
    /** Timestamp of the override request. The timestamp is generated by the Entity Manager instance that receives the request. */
    requestTimestamp?: string;
}

export namespace Override {
    /** status of the override */
    export const Status = {
        OverrideStatusInvalid: "OVERRIDE_STATUS_INVALID",
        OverrideStatusApplied: "OVERRIDE_STATUS_APPLIED",
        OverrideStatusPending: "OVERRIDE_STATUS_PENDING",
        OverrideStatusTimeout: "OVERRIDE_STATUS_TIMEOUT",
        OverrideStatusRejected: "OVERRIDE_STATUS_REJECTED",
        OverrideStatusDeletionPending: "OVERRIDE_STATUS_DELETION_PENDING",
    } as const;
    export type Status = (typeof Status)[keyof typeof Status];
    /**
     * The type of the override, defined by the stage of the entity lifecycle that the entity was in when the override
     *  was requested.
     */
    export const Type = {
        OverrideTypeInvalid: "OVERRIDE_TYPE_INVALID",
        OverrideTypeLive: "OVERRIDE_TYPE_LIVE",
        OverrideTypePostExpiry: "OVERRIDE_TYPE_POST_EXPIRY",
    } as const;
    export type Type = (typeof Type)[keyof typeof Type];
}
