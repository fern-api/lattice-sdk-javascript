// This file was auto-generated by Fern from our API Definition.

import type * as Lattice from "../index.js";

/**
 * Available for Entities that are a correlated (N to 1) set of entities. This will be present on
 *  each entity in the set.
 */
export interface Correlation {
    /**
     * This entity is the primary of a correlation meaning that it serves as the representative
     *  entity of the correlation set.
     */
    primary?: Lattice.PrimaryCorrelation;
    /**
     * This entity is a secondary of a correlation meaning that it will be represented by the
     *  primary of the correlation set.
     */
    secondary?: Lattice.SecondaryCorrelation;
    /** If present, this entity is a part of a correlation set. */
    membership?: Lattice.CorrelationMembership;
    /**
     * If present, this entity was explicitly decorrelated from one or more entities.
     *  An entity can be both correlated and decorrelated as long as they are disjoint sets.
     *  An example would be if a user in the UI decides that two tracks are not actually the
     *  same despite an automatic correlator having correlated them. The user would then
     *  decorrelate the two tracks and this decorrelation would be preserved preventing the
     *  correlator from re-correlating them at a later time.
     */
    decorrelation?: Lattice.Decorrelation;
}
