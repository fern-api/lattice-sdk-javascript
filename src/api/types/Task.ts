// This file was auto-generated by Fern from our API Definition.

import type * as Lattice from "../index.js";

/**
 * A Task is something an agent can be asked to do.
 */
export interface Task {
    /** Version of this Task. */
    version?: Lattice.TaskVersion;
    /** DEPRECATED: Human readable display name for this Task, should be short (<100 chars). */
    displayName?: string;
    /** Full Task parameterization. */
    specification?: Lattice.GoogleProtobufAny;
    /** Records who created this Task. This field will not change after the Task has been created. */
    createdBy?: Lattice.Principal;
    /** Records who updated this Task last. */
    lastUpdatedBy?: Lattice.Principal;
    /** Records the time of last update. */
    lastUpdateTime?: string;
    /** The status of this Task. */
    status?: Lattice.TaskStatus;
    /** If the Task has been scheduled to execute, what time it should execute at. */
    scheduledTime?: string;
    /** Any related Tasks associated with this, typically includes an assignee for this Task and/or a parent. */
    relations?: Lattice.Relations;
    /** Longer, free form human readable description of this Task */
    description?: string;
    /**
     * If set, execution of this Task is managed elsewhere, not by Task Manager.
     *  In other words, Task manager will not attempt to update the assigned agent with execution instructions.
     */
    isExecutedElsewhere?: boolean;
    /** Time of Task creation. */
    createTime?: string;
    /** If populated, designates this to be a replicated Task. */
    replication?: Lattice.Replication;
    /**
     * If populated, indicates an initial set of entities that can be used to execute an entity aware task
     *  For example, an entity Objective, an entity Keep In Zone, etc.
     *  These will not be updated during execution. If a taskable agent needs continuous updates on the entities from the
     *  COP, can call entity-manager, or use an AlternateId escape hatch.
     */
    initialEntities?: Lattice.TaskEntity[];
    /**
     * The networked owner of this Task. It is used to ensure that linear writes occur on the node responsible
     *  for replication of task data to other nodes running Task Manager.
     */
    owner?: Lattice.Owner;
}
